#ifndef KEYMAP_H
#define KEYMAP_H

/**
 * keymap.h
 * This file defines the keymap, along with some other useful arrays
 * 
 * (C) Cameron Krueger, 2020
 * Created ? October 2020
 **/

#include "connections.h"

enum KEY_IDS
{
    KEY_EMPTY,
    KEY_ERROR,
    KEY_ESC,
    KEY_F1,
    KEY_F2,
    KEY_F3,
    KEY_F4,
    KEY_F5,
    KEY_F6,
    KEY_F7,
    KEY_F8,
    KEY_F9,
    KEY_F10,
    KEY_F11,
    KEY_F12,
    KEY_PRNTSC,
    KEY_SCLOCK,
    KEY_PAUSEBR,
    KEY_TILDE,
    KEY_1,
    KEY_2,
    KEY_3,
    KEY_4,
    KEY_5,
    KEY_6,
    KEY_7,
    KEY_8,
    KEY_9,
    KEY_0,
    KEY_DASH,
    KEY_EQ,
    KEY_BKSPACE,
    KEY_INSERT,
    KEY_HOME,
    KEY_PAGEUP,
    KEY_NUMLOCK,
    KEY_NUM_FWSLASH,
    KEY_NUM_ASTERISK,
    KEY_NUM_DASH,
    KEY_TAB,
    KEY_Q,
    KEY_W,
    KEY_E,
    KEY_R,
    KEY_T,
    KEY_Y,
    KEY_U,
    KEY_I,
    KEY_O,
    KEY_P,
    KEY_OPENBKT,
    KEY_CLOSEBKT,
    KEY_BKSLASH,
    KEY_DEL,
    KEY_END,
    KEY_PAGEDN,
    KEY_NUM_7,
    KEY_NUM_8,
    KEY_NUM_9,
    KEY_NUM_PLUS,
    KEY_CAPSLOCK,
    KEY_A,
    KEY_S,
    KEY_D,
    KEY_F,
    KEY_G,
    KEY_H,
    KEY_J,
    KEY_K,
    KEY_L,
    KEY_SEMI,
    KEY_QUOTE,
    KEY_ENTER,
    KEY_NUM_4,
    KEY_NUM_5,
    KEY_NUM_6,
    KEY_LSHIFT,
    KEY_Z,
    KEY_X,
    KEY_C,
    KEY_V,
    KEY_B,
    KEY_N,
    KEY_M,
    KEY_COMMA,
    KEY_PERIOD,
    KEY_FWSLASH,
    KEY_RSHIFT,
    KEY_ARUP,
    KEY_NUM_1,
    KEY_NUM_2,
    KEY_NUM_3,
    KEY_NUM_ENTER,
    KEY_LCTRL,
    KEY_LWIN,
    KEY_LALT,
    KEY_SPACE,
    KEY_RALT,
    KEY_RWIN,
    KEY_MENU,
    KEY_RCTRL,
    KEY_ARLEFT,
    KEY_ARDOWN,
    KEY_ARRIGHT,
    KEY_NUM_0,
    KEY_NUM_PERIOD
};

struct Key {
    unsigned char hwCol;
    unsigned char hwRow;
    enum KEY_IDS keyID;
    char* keyName;
    unsigned char hidCode;
    unsigned char modBit;
};

// Pin assignment for keyboard lock LEDs.
#define LED_CAPS_LOCK ROW_15
#define LED_SCRL_LOCK ROW_9
#define LED_NUM_LOCK ROW_6

#define INDEX_ERROR_KEY 0 // First key in matrix is error code

// Format for keymap is based on matrix defined in connections.h:
//  i.e. if you have 
const size_t KEYMAP_COUNT = 103;
const struct Key KEYMAP[] = {
    {0, 0, KEY_ERROR, "ERROR", 0x01, 0x00},
    {COL_H, ROW_14, KEY_ESC, "ESCAPE", 0x29, 0x00},
    {COL_G, ROW_14, KEY_F1, "F1", 0x3A, 0x00}, 
    {COL_F, ROW_14, KEY_F2, "F2", 0x3B, 0x00},
    {COL_E, ROW_14, KEY_F3, "F3", 0x3C, 0x00},
    {COL_D, ROW_14, KEY_F4, "F4", 0x3D, 0x00},
    {COL_C, ROW_14, KEY_F5, "F5", 0x3E, 0x00},
    {COL_B, ROW_14, KEY_F6, "F6", 0x3F, 0x00},
    {COL_A, ROW_14, KEY_F7, "F7", 0x40, 0x00},
    {COL_G, ROW_8, KEY_F8, "F8", 0x41, 0x00},
    {COL_F, ROW_8, KEY_F9, "F9", 0x42, 0x00},
    {COL_E, ROW_8, KEY_F10, "F10", 0x43, 0x00},
    {COL_D, ROW_8, KEY_F11, "F11", 0x44, 0x00},
    {COL_C, ROW_8, KEY_F12, "F12", 0x45, 0x00},
    {COL_F, ROW_5, KEY_PRNTSC, "PRINT SCREEN", 0x46, 0x00},
    {COL_B, ROW_8, KEY_SCLOCK, "SCROLL LOCK", 0x47, 0x00},
    {COL_A, ROW_8, KEY_PAUSEBR, "PAUSE/BREAK", 0x48, 0x00},
    {COL_H, ROW_13, KEY_TILDE, "~", 0x35, 0x00},
    {COL_G, ROW_13, KEY_1, "1", 0x1E, 0x00},
    {COL_F, ROW_13, KEY_2, "2", 0x1F, 0x00},
    {COL_E, ROW_13, KEY_3, "3", 0x20, 0x00},
    {COL_D, ROW_13, KEY_4, "4", 0x21, 0x00},
    {COL_C, ROW_13, KEY_5, "5", 0x22, 0x00},
    {COL_B, ROW_13, KEY_6, "6", 0x23, 0x00},
    {COL_A, ROW_13, KEY_7, "7", 0x24, 0x00},
    {COL_H, ROW_7, KEY_8, "8", 0x25, 0x00},
    {COL_G, ROW_7, KEY_9, "9", 0x26, 0x00},
    {COL_F, ROW_7, KEY_0, "0", 0x27, 0x00},
    {COL_E, ROW_7, KEY_DASH, "-", 0x2D, 0x00},
    {COL_D, ROW_7, KEY_EQ, "=", 0x2E, 0x00},
    {COL_C, ROW_7, KEY_BKSPACE, "BACKSPACE", 0x2A, 0x00},
    {COL_A, ROW_1, KEY_INSERT, "INSERT", 0x49, 0x00},
    {COL_H, ROW_5, KEY_HOME, "HOME", 0x4A, 0x00},
    {COL_G, ROW_5, KEY_PAGEUP, "PAGE UP", 0x4B, 0x00},
    {COL_C, ROW_5, KEY_NUMLOCK, "NUM LOCK", 0x53, 0x00},
    {COL_A, ROW_5, KEY_NUM_FWSLASH, "NUMPAD /", 0x38, 0x00},
    {COL_B, ROW_4, KEY_NUM_ASTERISK, "NUMPAD *", 0x55, 0x00},
    {COL_A, ROW_4, KEY_NUM_DASH, "NUMPAD -", 0x56, 0x00},
    {COL_H, ROW_12, KEY_TAB, "TAB", 0x2B, 0x00},
    {COL_G, ROW_12, KEY_Q, "Q", 0x14, 0x00},
    {COL_F, ROW_12, KEY_W, "W", 0x1A, 0x00},
    {COL_E, ROW_12, KEY_E, "E", 0x08, 0x00},
    {COL_D, ROW_12, KEY_R, "R", 0x15, 0x00},
    {COL_C, ROW_12, KEY_T, "T", 0x17, 0x00},
    {COL_B, ROW_12, KEY_Y, "Y", 0x1C, 0x00},
    {COL_A, ROW_12, KEY_U, "U", 0x18, 0x00},
    {COL_B, ROW_7, KEY_I, "I", 0x0C, 0x00},
    {COL_A, ROW_7, KEY_O, "O", 0x12, 0x00},
    {COL_H, ROW_8, KEY_P, "P", 0x13, 0x00},
    {COL_H, ROW_4, KEY_OPENBKT, "[", 0x2F, 0x00},
    {COL_G, ROW_4, KEY_CLOSEBKT, "]", 0x30, 0x00},
    {COL_F, ROW_4, KEY_BKSLASH, "\\", 0x31, 0x00},
    {COL_D, ROW_1, KEY_DEL, "DELETE", 0x4C, 0x00},
    {COL_C, ROW_1, KEY_END, "END", 0x4D, 0x00},
    {COL_B, ROW_1, KEY_PAGEDN, "PAGE DN", 0x4E, 0x00},
    {COL_E, ROW_4, KEY_NUM_7, "NUMPAD 7", 0x5F, 0x00},
    {COL_D, ROW_4, KEY_NUM_8, "NUMPAD 8", 0x60, 0x00},
    {COL_C, ROW_4, KEY_NUM_9, "NUMPAD 9", 0x61, 0x00},
    {COL_A, ROW_3, KEY_NUM_PLUS, "NUMPAD +", 0x57, 0x00},
    {COL_E, ROW_5, KEY_CAPSLOCK, "CAPS LOCK", 0x39, 0x00},
    {COL_H, ROW_11, KEY_A, "A", 0x04, 0x00},
    {COL_G, ROW_11, KEY_S, "S", 0x16, 0x00},
    {COL_F, ROW_11, KEY_D, "D", 0x07, 0x00},
    {COL_E, ROW_11, KEY_F, "F", 0x09, 0x00},
    {COL_D, ROW_11, KEY_G, "G", 0x0A, 0x00},
    {COL_C, ROW_11, KEY_H, "H", 0x0B, 0x00},
    {COL_B, ROW_11, KEY_J, "J", 0x0D, 0x00},
    {COL_A, ROW_11, KEY_K, "K", 0x0E, 0x00},
    {COL_H, ROW_3, KEY_L, "L", 0x0F, 0x00},
    {COL_G, ROW_3, KEY_SEMI, ";", 0x33, 0x00},
    {COL_F, ROW_3, KEY_QUOTE, "'", 0x34, 0x00},
    {COL_E, ROW_3, KEY_ENTER, "ENTER", 0x28, 0x00},
    {COL_D, ROW_3, KEY_NUM_4, "NUMPAD 4", 0x5C, 0x00},
    {COL_C, ROW_3, KEY_NUM_5, "NUMPAD 5", 0x5D, 0x00},
    {COL_B, ROW_3, KEY_NUM_6, "NUMPAD 6", 0x5E, 0x00},
    {COL_F, ROW_18, KEY_LSHIFT, "LEFT SHIFT", 0xE1, 0b00000010},
    {COL_H, ROW_16, KEY_Z, "Z", 0x1D, 0x00},
    {COL_G, ROW_16, KEY_X, "X", 0x1B, 0x00},
    {COL_F, ROW_16, KEY_C, "C", 0x06, 0x00},
    {COL_E, ROW_16, KEY_V, "V", 0x19, 0x00},
    {COL_D, ROW_16, KEY_B, "B", 0x05, 0x00},
    {COL_C, ROW_16, KEY_N, "N", 0x11, 0x00},
    {COL_B, ROW_16, KEY_M, "M", 0x10, 0x00},
    {COL_A, ROW_16, KEY_COMMA, ",", 0x36, 0x00},
    {COL_H, ROW_2, KEY_PERIOD, ".", 0x37, 0x00},
    {COL_G, ROW_2, KEY_FWSLASH, "/", 0x38, 0x00},
    {COL_E, ROW_18, KEY_RSHIFT, "RIGHT SHIFT", 0xE5, 0b00100000},
    {COL_E, ROW_1, KEY_ARUP, "ARROW UP", 0x52, 0x00},
    {COL_C, ROW_2, KEY_NUM_1, "NUMPAD 1", 0x59, 0x00},
    {COL_B, ROW_2, KEY_NUM_2, "NUMPAD 2", 0x5A, 0x00},
    {COL_A, ROW_2, KEY_NUM_3, "NUMPAD 3", 0x5B, 0x00},
    {COL_B, ROW_5, KEY_NUM_ENTER, "NUMPAD ENTER", 0x58, 0x00},
    {COL_H, ROW_19, KEY_LCTRL, "LEFT CTRL", 0xE0, 0b00000001},
//    {, , KEY_LWIN, "LEFT WINDOWS", 0xE3, 0b00001000},
    {COL_H, ROW_17, KEY_LALT, "LEFT ALT", 0xE2, 0b00000100},
    {COL_F, ROW_2, KEY_SPACE, "SPACE", 0x2C, 0x00},
    {COL_D, ROW_5, KEY_RALT, "RIGHT ALT", 0xE6, 0b01000000},
//    {, , KEY_RWIN, "RIGHT WINDOWS", 0xE7, 0b10000000},
//    {, , KEY_MENU, "MENU", 0b00000000},
    {COL_C, ROW_19, KEY_RCTRL, "RIGHT CTRL", 0xE4, 0b00010000},
    {COL_H, ROW_1, KEY_ARLEFT, "ARROW LEFT", 0x50, 0x00},
    {COL_G, ROW_1, KEY_ARDOWN, "ARROW DOWN", 0x51, 0x00},
    {COL_F, ROW_1, KEY_ARRIGHT, "ARROW RIGHT", 0x4F, 0x00},
    {COL_E, ROW_2, KEY_NUM_0, "NUMPAD 0", 0x62, 0x00},
    {COL_D, ROW_2, KEY_NUM_PERIOD, "NUMPAD .", 0x63, 0x00}
};

/**
 * Okay, keymap needs to be a two dimensional array which matches the layout of the
 * keyboard. Then, rearrange the orders of the row and column arrays such that the
 * indicies of the values in the row and column arrays can also be used to index the
 * keyap.
 */

#endif
